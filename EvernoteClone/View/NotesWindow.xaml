<!--
    // This project copyrights is for Ahmed Gamal Abdel Gawad,
    // LinkedIn: https://www.linkedin.com/in/aGaabdelgawad
    // GitHub: https://github.com/aGaabdelgawad
    // Youtube: https://www.youtube.com/AhmedGamalAbdelGawad
    // Facebook: https://www.facebook.com/aGaabdelgawad
-->
<Window x:Class="EvernoteClone.View.NotesWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:EvernoteClone.View"
        xmlns:vm="clr-namespace:EvernoteClone.ViewModel"
        xmlns:uc="clr-namespace:EvernoteClone.View.UserControls"
        xmlns:cc="clr-namespace:EvernoteClone.View.CustomControls"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="False"
        mc:Ignorable="d"
        Title="Evernote Clone" Height="600" Width="1000" MinHeight="400" MinWidth="780" WindowStartupLocation="CenterScreen"
        x:Name="Window">
    <Window.Resources>
        <Style TargetType="Grid" x:Key="darkGrid">
            <Setter Property="Background" Value="{StaticResource darkColor}"/>
            <Setter Property="Margin" Value="0"/>
        </Style>

        <Style TargetType="Button" x:Key="addNotebookButtonStyle">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Width" Value="270"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="{StaticResource darkColor}"/>
            <Setter Property="Foreground" Value="{StaticResource lightColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"
                                              Margin="5 0"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource greenColor}"/>
                    <Setter Property="Foreground" Value="{StaticResource lightColor}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Image" x:Key="addNotebookImage">
            <Setter Property="Margin" Value="0 3 3 3"/>
            <Setter Property="Stretch" Value="Uniform"/>
            <Setter Property="Height" Value="24"/>
            <Setter Property="Width" Value="24"/>
        </Style>

        <Style TargetType="TextBlock" x:Key="addNewTextBlock">
            <Setter Property="Margin" Value="0 0 3 0"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style TargetType="ListView" x:Key="listViewStyle">
            <Setter Property="Background" Value="{StaticResource darkColor}"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style>

        <Style TargetType="ListView" x:Key="notebooksListViewStyle" BasedOn="{StaticResource listViewStyle}">
            <Setter Property="Width" Value="270"/>
        </Style>

        <Style TargetType="ListView" x:Key="notesListViewStyle" BasedOn="{StaticResource listViewStyle}">
            <Setter Property="Margin" Value="10 0 0 0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Width" Value="245"/>
        </Style>
        <Style TargetType="ToolBarTray" x:Key="toolBarTrayStyle">
            <Setter Property="Background" Value="{StaticResource lightColor}"/>
        </Style>

        <Style TargetType="Grid" x:Key="lightGrid">
            <Setter Property="Background" Value="{StaticResource lightColor}"/>
            <Setter Property="Margin" Value="5 0 0 0"/>
        </Style>

        <Style TargetType="ToolBar" x:Key="toolBarStyle">
            <!-- Not Dropdown Button -->
            <Setter Property="ToolBarTray.IsLocked" Value="True"/>
            <!-- Not Overflow Button -->
            <Setter Property="OverflowMode" Value="Never"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToolBar}">
                        <ToolBarPanel IsItemsHost="True" Background="{StaticResource lightColor}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ComboBox" x:Key="fontFamilycomboBoxStyle">
            <Setter Property="Width" Value="100"/>
        </Style>
        <Style TargetType="ComboBox" x:Key="fontSizecomboBoxStyle">
            <Setter Property="Width" Value="50"/>
            <Setter Property="IsEditable" Value="True"/>
        </Style>
        <Style TargetType="ComboBox" x:Key="fontColorcomboBoxStyle">
            <Setter Property="Width" Value="50"/>
        </Style>

        <Style TargetType="ToggleButton" x:Key="toggleButtonStyle">
            <Setter Property="Margin" Value="10 0"/>
        </Style>

        <Style TargetType="TextBlock" x:Key="boldButtonTextBlock">
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>
        <Style TargetType="TextBlock" x:Key="italicButtonTextBlock">
            <Setter Property="FontStyle" Value="Italic"/>
        </Style>
        <Style TargetType="TextBlock" x:Key="underlineButtonTextBlock">
            <Setter Property="TextDecorations" Value="underline"/>
        </Style>

        <Style TargetType="Button" x:Key="insertImageButtonStyle">
            <Setter Property="Margin" Value="3 0"/>
        </Style>

        <Style TargetType="Button" x:Key="speechButtonStyle">
            <Setter Property="Margin" Value="6 0"/>
        </Style>

        <Style TargetType="Image" x:Key="defaultImage">
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Stretch" Value="Uniform"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Width" Value="20"/>
        </Style>

        <Style TargetType="Button" x:Key="saveButtonStyle">
            <Setter Property="Margin" Value="0 0 3 0"/>
        </Style>

        <Style TargetType="Paragraph">
            <Setter Property="Margin" Value="0"/>
        </Style>
    </Window.Resources>
    <DockPanel DataContext="{Binding}">
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="File">
                <MenuItem Header="New Nootbook"
                          ToolTip="Create a new notebook"
                          Command="{Binding NewNotebookCommand}"/>
                <Separator/>
                <MenuItem Header="Save"
                          ToolTip="Save note changes"
                          Command="{Binding SaveCommand}"/>
                <MenuItem Header="Save As"
                          ToolTip="Save note locally"
                          Command="{Binding SaveAsCommand}"/>
                <Separator/>
                <MenuItem Header="Exit"
                          Command="{Binding ExitCommand}"/>
            </MenuItem>
            <MenuItem Header="View">
                <MenuItem Header="Normal"
                          Command="{Binding NormalScreenCommand}"
                          CommandParameter="{Binding Path=., RelativeSource={RelativeSource AncestorType=Window}}"/>
                <MenuItem Header="Full Screen"
                          Command="{Binding FullScreenCommand}"
                          CommandParameter="{Binding Path=., RelativeSource={RelativeSource AncestorType=Window}}"/>
            </MenuItem>
            <MenuItem Header="Account">
                <TextBlock Text="{Binding User.Name, StringFormat={}Name: {0}}"/>
                <TextBlock Text="{Binding User.Email, StringFormat={}Email: {0}}"/>
                <MenuItem Header="Logout"
                          Command="{Binding LogoutCommand}"/>
            </MenuItem>
            <MenuItem Header="Help">
                <MenuItem Header="About Evernote Clone"
                          Command="{Binding AboutCommand}"/>
                <MenuItem Header="Ahmed Gamal Abdel Gawad"
                          Command="{Binding VisitLinkCommand}"/>
            </MenuItem>
        </Menu>
        <Grid DockPanel.Dock="Left"
              Style="{StaticResource darkGrid}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Button Grid.Row="0"
                        Style="{StaticResource addNotebookButtonStyle}"
                        ToolTip="Create a new notebook"
                        Command="{Binding NewNotebookCommand}">
                <StackPanel Orientation="Horizontal">
                    <Image Source="Images/addNotebook.png"
                       Style="{StaticResource addNotebookImage}"/>
                    <TextBlock Text="New Notebook"
                                Style="{StaticResource addNewTextBlock}"/>
                </StackPanel>
            </Button>

            <ListView Grid.Row="1"
                  ItemsSource="{Binding NotebooksWithVisibility}"
                  Style="{StaticResource notebooksListViewStyle}">
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <Expander IsExpanded="{Binding IsExpanded}">
                                <Expander.Header>
                                    <Grid>
                                        <uc:DisplayNotebookControl NotebookWithVis="{Binding}"
                                                                   Tag="{Binding DataContext, ElementName=Window}">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="MouseDoubleClick">
                                                    <i:InvokeCommandAction Command="{Binding DataContext.StartEditNotebookCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                                                            CommandParameter="{Binding}"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                            <uc:DisplayNotebookControl.ContextMenu>
                                                <ContextMenu>
                                                    <MenuItem Header="+ Add Note"
                                                                Command="{Binding PlacementTarget.Tag.NewNoteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                                                CommandParameter="{Binding}"/>
                                                    <MenuItem Header="Rename"
                                                             Command="{Binding PlacementTarget.Tag.StartEditNotebookCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                                              CommandParameter="{Binding}"/>
                                                    <MenuItem Header="Delete"
                                                               Command="{Binding PlacementTarget.Tag.DeleteNotebookCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                                               CommandParameter="{Binding}"/>
                                                </ContextMenu>
                                            </uc:DisplayNotebookControl.ContextMenu>
                                        </uc:DisplayNotebookControl>
                                        <TextBox Text="{Binding Notebook.Name, Mode=TwoWay}"
                                                 Visibility="{Binding Visibility}">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="LostFocus">
                                                    <i:InvokeCommandAction Command="{Binding DataContext.EndEditNotebookCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                                                          CommandParameter="{Binding}"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </TextBox>
                                    </Grid>
                                </Expander.Header>
                                <ListView ItemsSource="{Binding NotesWithVisibility}"
                                          SelectedItem="{Binding DataContext.SelectedNoteWithVis, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                          Style="{StaticResource notesListViewStyle}">
                                    <ListView.ItemTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <uc:DisplayNoteControl NoteWithVis="{Binding}"
                                                                       Tag="{Binding DataContext, ElementName=Window}">
                                                    <i:Interaction.Triggers>
                                                        <i:EventTrigger EventName="MouseDoubleClick">
                                                            <i:InvokeCommandAction Command="{Binding DataContext.StartEditNoteCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                                           CommandParameter="{Binding}"/>
                                                        </i:EventTrigger>
                                                    </i:Interaction.Triggers>
                                                    <uc:DisplayNoteControl.ContextMenu>
                                                        <ContextMenu>
                                                            <MenuItem Header="Rename"
                                                                       Command="{Binding PlacementTarget.Tag.StartEditNoteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                                                       CommandParameter="{Binding}"/>
                                                            <MenuItem Header="Delete"
                                                                       Command="{Binding PlacementTarget.Tag.DeleteNoteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                                                       CommandParameter="{Binding}"/>
                                                        </ContextMenu>
                                                    </uc:DisplayNoteControl.ContextMenu>
                                                </uc:DisplayNoteControl>
                                                <TextBox Grid.Column="1"
                                                         Text="{Binding Note.Title, Mode=TwoWay}"
                                                         Visibility="{Binding Visibility}">
                                                    <i:Interaction.Triggers>
                                                        <i:EventTrigger EventName="LostFocus">
                                                            <i:InvokeCommandAction Command="{Binding DataContext.EndEditNoteCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                                                                     CommandParameter="{Binding}"/>
                                                        </i:EventTrigger>
                                                    </i:Interaction.Triggers>
                                                </TextBox>
                                            </Grid>
                                        </DataTemplate>
                                    </ListView.ItemTemplate>
                                </ListView>
                            </Expander>
                        </Grid>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>

        </Grid>
        <Grid DockPanel.Dock="Top"
              Style="{StaticResource lightGrid}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <ToolBarTray Grid.Column="0"
                     Style="{StaticResource toolBarTrayStyle}">
                <ToolBar Style="{StaticResource toolBarStyle}">
                    <ComboBox ItemsSource="{Binding FontFamilies}"
                          SelectedItem="{Binding SelectedFontFamily, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          ToolTip="Font"
                          Style="{StaticResource fontFamilycomboBoxStyle}"/>
                    <ComboBox ItemsSource="{Binding FontSizes}"
                          Text="{Binding SelectedFontSize, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          ToolTip="Font Size"
                          Style="{StaticResource fontSizecomboBoxStyle}"/>
                    <ComboBox ItemsSource="{Binding FontColors}"
                          SelectedItem="{Binding SelectedFontColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          ToolTip="Font Color"
                          Style="{StaticResource fontColorcomboBoxStyle}"/>
                    <ComboBox ItemsSource="{Binding FontColors}"
                          SelectedItem="{Binding SelectedBackgroundColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          ToolTip="Background Color"
                          Style="{StaticResource fontColorcomboBoxStyle}"/>
                    <ToggleButton IsChecked="{Binding BoldButtonIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              ToolTip="Bold"
                              Style="{StaticResource toggleButtonStyle}">
                        <TextBlock Text="B"
                               Style="{StaticResource boldButtonTextBlock}"/>
                    </ToggleButton>
                    <ToggleButton IsChecked="{Binding ItalicButtonIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              ToolTip="Italic"
                              Style="{StaticResource toggleButtonStyle}">
                        <TextBlock Text="I"
                               Style="{StaticResource italicButtonTextBlock}"/>
                    </ToggleButton>
                    <ToggleButton IsChecked="{Binding UnderlineButtonIsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              ToolTip="Underline"
                              Style="{StaticResource toggleButtonStyle}">
                        <TextBlock Text="U"
                               Style="{StaticResource underlineButtonTextBlock}"/>
                    </ToggleButton>
                    <Button Command="{Binding InsertImageCommand}"
                        ToolTip="Insert pictures"
                        Style="{StaticResource insertImageButtonStyle}">
                        <Image Source="Images/insertImage.png"
                           Style="{StaticResource defaultImage}"/>
                    </Button>
                    <Button Command="{Binding SpeechCommand}"
                        ToolTip="Try say something"
                        Style="{StaticResource speechButtonStyle}">
                        <Image Source="Images/speechRecord.png"
                           Style="{StaticResource defaultImage}"/>
                    </Button>
                </ToolBar>
            </ToolBarTray>
            <ToolBarTray Grid.Column="2"
                     Style="{StaticResource toolBarTrayStyle}">
                <ToolBar Style="{StaticResource toolBarStyle}">
                    <Button Command="{Binding SaveCommand}"
                        ToolTip="Save note changes"
                        Style="{StaticResource saveButtonStyle}">
                        <Image Source="Images/save.png"
                       Style="{StaticResource defaultImage}"/>
                    </Button>
                    <Button Command="{Binding SaveAsCommand}"
                        ToolTip="Save note locally"
                        Style="{StaticResource saveButtonStyle}">
                        <Image Source="Images/saveAs.png"
                       Style="{StaticResource defaultImage}"/>
                    </Button>
                </ToolBar>
            </ToolBarTray>

        </Grid>
        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem>
                <TextBlock Text="{Binding StatusBarText}"/>
            </StatusBarItem>
        </StatusBar>
        <Grid>
            <cc:BindableRichTextBox Document="{Binding NoteContent, Mode=TwoWay}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="TextChanged">
                        <i:InvokeCommandAction Command="{Binding UpdateStatusBarCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <i:Interaction.Behaviors>
                    <cc:RichTextSelectionBehavior SelectedText="{Binding SelectedText, Mode=TwoWay}"/>
                </i:Interaction.Behaviors>
            </cc:BindableRichTextBox>
        </Grid>
    </DockPanel>
</Window>
